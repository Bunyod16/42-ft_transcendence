version: "3.8"

services:
  postgresdb:
    container_name: postgresdb
    image: postgres:14.7-alpine3.17
    restart: unless-stopped
    networks:
      - ft_trancendence
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    expose:
      - ${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - trancendence_posgresdb:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:7.2-rc1-alpine3.17
    restart: unless-stopped
    configs:
      - source: redis_config
        target: /usr/local/etc/redis/redis.conf
    networks:
      - ft_trancendence
    expose:
      - ${REDIS_PORT}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis_volume:/data
    entrypoint: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  nginx:
    container_name: nginx_cdn
    image: nginx:alpine3.17
    restart: unless-stopped
    networks:
      - ft_trancendence
    expose:
      - ${CDN_PORT}
    ports:
      - "${CDN_PORT}:${CDN_PORT}"
    environment:
      CDN_PORT: ${CDN_PORT}
      CDN_DOMAIN_NAME: ${CDN_DOMAIN_NAME}
    configs:
      - source: nginx_42trancendence_conf_template
        target: /etc/nginx/templates/42trancendence_cdn.conf.template
    volumes:
      - cdn_volume:/var/www/42trancendence/avatar:ro

  nestjs:
    container_name: backend
    image: 42-ft_transendence-nestjs
    build:
      context: ./backend
    depends_on:
      postgresdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ft_trancendence
    environment:
      HOST_URL: ${HOST_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      NESTJS_PORT: ${NEST_LISTEN_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ENV: ${ENV}
      CDN_PORT: ${CDN_PORT}
    ports:
      - "3000:${NEST_LISTEN_PORT}"
    expose:
      - ${NEST_LISTEN_PORT}
    volumes:
      - cdn_volume:/trancendence_nestjs/src/avatars

  nextjs:
    container_name: frontend
    image: 42-ft_transendence-nextjs
    build:
      context: ./frontend
    environment:
      HOST_URL: ${HOST_URL}
    ports:
      - "8080:${NEXT_LISTEN_PORT}"
    depends_on:
      nestjs:
        condition: service_started
    restart: unless-stopped
    networks:
      - ft_trancendence

configs:
  nginx_42trancendence_conf_template:
    file: ./backend/nginx/conf/42trancendence_cdn.conf.template
  redis_config:
    file: ./backend/redis/conf/redis.conf

networks:
  ft_trancendence:

volumes:
  cdn_volume:
  redis_volume:
  trancendence_posgresdb:
